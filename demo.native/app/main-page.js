"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var page;
var markers;
var tilt;
var map = null;
function pageLoaded(args) {
    page = args.object;
    markers = [1];
    tilt = 45;
    page.bindingContext = new main_view_model_1.HelloWorldModel();
    page.getViewById('map').on('mapReady', onMapReady.bind(this));
    page.getViewById('map').on('mapClick', onMapClick.bind(this));
    page.getViewById('map').on('mapLongClick', onMapLongClick.bind(this));
}
exports.pageLoaded = pageLoaded;
function onLoaded(args) {
    var points = [
        {
            latitude: 59.435803,
            longitude: 24.757259,
            activationRadius: 10
        }, {
            latitude: 59.433808,
            longitude: 24.766438,
            activationRadius: 15
        }, {
            latitude: 59.438599,
            longitude: 24.791812,
            activationRadius: 25
        }
    ];
    args.object.on('mapReady', function (args) {
        onMapReady(args);
        map = args.object;
        map.toggleScroll(false);
        map.toggleZoom(false);
        map
            .calculateRoute(points);
    });
}
exports.onLoaded = onLoaded;
function removeMarkers() {
    map.removeMarkers(markers);
}
exports.removeMarkers = removeMarkers;
function navigation() {
    map.startNavigation();
}
exports.navigation = navigation;
function simulation() {
    map.startSimulation();
}
exports.simulation = simulation;
function stop() {
    map.stopNavigation();
}
exports.stop = stop;
function showWay() {
    map.showWay();
}
exports.showWay = showWay;
function onMapClick(event) {
    var count = map._getMarkersCount();
    var next = count + 1;
}
function onMapLongClick(event) {
    var count = map._getMarkersCount();
    var next = count + 1;
}
function updateMarker(event) {
    page.getViewById('map').updateMarker({
        id: 1,
        latitude: 10.6689243,
        longitude: -61.5315486,
    });
}
exports.updateMarker = updateMarker;
function onMapReady(event) {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEscURBQW9EO0FBR3BELElBQUksSUFBSSxDQUFDO0FBQ1QsSUFBSSxPQUFPLENBQUM7QUFDWixJQUFJLElBQUksQ0FBQztBQUNULElBQUksR0FBRyxHQUFHLElBQUksQ0FBQztBQUdmLG9CQUEyQixJQUEwQjtJQUVqRCxJQUFJLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNkLElBQUksR0FBRyxFQUFFLENBQUM7SUFDVixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksaUNBQWUsRUFBRSxDQUFDO0lBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFURCxnQ0FTQztBQUVELGtCQUF5QixJQUFJO0lBQ3pCLElBQU0sTUFBTSxHQUFHO1FBQ1g7WUFDSSxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsU0FBUztZQUNwQixnQkFBZ0IsRUFBRSxFQUFFO1NBQ3ZCLEVBQUU7WUFDQyxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsU0FBUztZQUNwQixnQkFBZ0IsRUFBRSxFQUFFO1NBQ3ZCLEVBQUU7WUFDQyxRQUFRLEVBQUUsU0FBUztZQUNuQixTQUFTLEVBQUUsU0FBUztZQUNwQixnQkFBZ0IsRUFBRSxFQUFFO1NBQ3ZCO0tBQ0osQ0FBQTtJQUVELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFBLElBQUk7UUFDM0IsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWpCLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRWxCLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdkIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUVyQixHQUFHO2FBQ0UsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBZS9CLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQTFDRCw0QkEwQ0M7QUFFRDtJQUNJLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUZELHNDQUVDO0FBRUQ7SUFDSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUE7QUFDekIsQ0FBQztBQUZELGdDQUVDO0FBRUQ7SUFDSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUE7QUFDekIsQ0FBQztBQUZELGdDQUVDO0FBRUQ7SUFDSSxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUE7QUFDeEIsQ0FBQztBQUZELG9CQUVDO0FBRUQ7SUFDSSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7QUFDakIsQ0FBQztBQUZELDBCQUVDO0FBRUQsb0JBQW9CLEtBQUs7SUFDckIsSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDckMsSUFBTSxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztBQVMzQixDQUFDO0FBRUQsd0JBQXdCLEtBQUs7SUFDekIsSUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDckMsSUFBTSxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztBQWdCM0IsQ0FBQztBQUVELHNCQUE2QixLQUFLO0lBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ2pDLEVBQUUsRUFBRSxDQUFDO1FBQ0wsUUFBUSxFQUFFLFVBQVU7UUFDcEIsU0FBUyxFQUFFLENBQUMsVUFBVTtLQUN6QixDQUFDLENBQUM7QUFDUCxDQUFDO0FBTkQsb0NBTUM7QUFFRCxvQkFBb0IsS0FBSztBQUV6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgb2JzZXJ2YWJsZSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgKiBhcyBwYWdlcyBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UnO1xuaW1wb3J0IHsgSGVsbG9Xb3JsZE1vZGVsIH0gZnJvbSAnLi9tYWluLXZpZXctbW9kZWwnO1xuaW1wb3J0IHsgSGVyZSwgSGVyZU1hcmtlciB9IGZyb20gJ25hdGl2ZXNjcmlwdC1oZXJlJztcblxubGV0IHBhZ2U7XG5sZXQgbWFya2VycztcbmxldCB0aWx0O1xubGV0IG1hcCA9IG51bGw7XG5cbi8vIEV2ZW50IGhhbmRsZXIgZm9yIFBhZ2UgJ2xvYWRlZCcgZXZlbnQgYXR0YWNoZWQgaW4gbWFpbi1wYWdlLnhtbFxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2VMb2FkZWQoYXJnczogb2JzZXJ2YWJsZS5FdmVudERhdGEpIHtcbiAgICAvLyBHZXQgdGhlIGV2ZW50IHNlbmRlclxuICAgIHBhZ2UgPSA8cGFnZXMuUGFnZT5hcmdzLm9iamVjdDtcbiAgICBtYXJrZXJzID0gWzFdO1xuICAgIHRpbHQgPSA0NTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbmV3IEhlbGxvV29ybGRNb2RlbCgpO1xuICAgIHBhZ2UuZ2V0Vmlld0J5SWQoJ21hcCcpLm9uKCdtYXBSZWFkeScsIG9uTWFwUmVhZHkuYmluZCh0aGlzKSk7XG4gICAgcGFnZS5nZXRWaWV3QnlJZCgnbWFwJykub24oJ21hcENsaWNrJywgb25NYXBDbGljay5iaW5kKHRoaXMpKTtcbiAgICBwYWdlLmdldFZpZXdCeUlkKCdtYXAnKS5vbignbWFwTG9uZ0NsaWNrJywgb25NYXBMb25nQ2xpY2suYmluZCh0aGlzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkxvYWRlZChhcmdzKSB7XG4gICAgY29uc3QgcG9pbnRzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBsYXRpdHVkZTogNTkuNDM1ODAzLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAyNC43NTcyNTksXG4gICAgICAgICAgICBhY3RpdmF0aW9uUmFkaXVzOiAxMFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBsYXRpdHVkZTogNTkuNDMzODA4LFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAyNC43NjY0MzgsXG4gICAgICAgICAgICBhY3RpdmF0aW9uUmFkaXVzOiAxNVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBsYXRpdHVkZTogNTkuNDM4NTk5LFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAyNC43OTE4MTIsXG4gICAgICAgICAgICBhY3RpdmF0aW9uUmFkaXVzOiAyNVxuICAgICAgICB9XG4gICAgXVxuXG4gICAgYXJncy5vYmplY3Qub24oJ21hcFJlYWR5JywgYXJncyA9PiB7XG4gICAgICAgIG9uTWFwUmVhZHkoYXJncyk7XG5cbiAgICAgICAgbWFwID0gYXJncy5vYmplY3Q7XG5cbiAgICAgICAgbWFwLnRvZ2dsZVNjcm9sbChmYWxzZSlcbiAgICAgICAgbWFwLnRvZ2dsZVpvb20oZmFsc2UpXG5cbiAgICAgICAgbWFwXG4gICAgICAgICAgICAuY2FsY3VsYXRlUm91dGUocG9pbnRzKVxuICAgICAgICAvLyAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAvLyAgICAgICAgIG1hcC5hZGRNYXJrZXJzKDxIZXJlTWFya2VyW10+cG9pbnRzLm1hcCgocG9pbnQsIGluZGV4KSA9PiAoe1xuICAgICAgICAvLyAgICAgICAgICAgICBpZDogaW5kZXgsXG4gICAgICAgIC8vICAgICAgICAgICAgIGxhdGl0dWRlOiBwb2ludC5sYXRpdHVkZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgbG9uZ2l0dWRlOiBwb2ludC5sb25naXR1ZGUsXG4gICAgICAgIC8vICAgICAgICAgICAgIHRpdGxlOiBgUG9pbnQgJHtpbmRleH1gLFxuICAgICAgICAvLyAgICAgICAgICAgICBvblRhcDogKG1hcmtlcikgPT4ge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZE1hcmtlciA9IE9iamVjdC5hc3NpZ24oe30sIG1hcmtlciwge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiAhbWFya2VyLnNlbGVjdGVkXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIG1hcC51cGRhdGVNYXJrZXIodXBkYXRlZE1hcmtlcik7XG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICB9KSkpO1xuICAgICAgICAvLyAgICAgfSlcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZU1hcmtlcnMoKSB7XG4gICAgbWFwLnJlbW92ZU1hcmtlcnMobWFya2Vycyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0aW9uKCkge1xuICAgIG1hcC5zdGFydE5hdmlnYXRpb24oKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2ltdWxhdGlvbigpIHtcbiAgICBtYXAuc3RhcnRTaW11bGF0aW9uKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgbWFwLnN0b3BOYXZpZ2F0aW9uKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dXYXkoKSB7XG4gICAgbWFwLnNob3dXYXkoKVxufVxuXG5mdW5jdGlvbiBvbk1hcENsaWNrKGV2ZW50KSB7XG4gICAgY29uc3QgY291bnQgPSBtYXAuX2dldE1hcmtlcnNDb3VudCgpO1xuICAgIGNvbnN0IG5leHQgPSBjb3VudCArIDE7XG5cbiAgICAvLyBtYXAuYWRkTWFya2Vycyg8SGVyZU1hcmtlcltdPlt7XG4gICAgLy8gICAgIGlkOiBuZXh0LFxuICAgIC8vICAgICBsYXRpdHVkZTogZXZlbnQubGF0aXR1ZGUsXG4gICAgLy8gICAgIGxvbmdpdHVkZTogZXZlbnQubG9uZ2l0dWRlLFxuICAgIC8vICAgICB0aXRsZTogYENsaWNrICR7bmV4dH1gXG4gICAgLy8gfV0pO1xuICAgIC8vIG1hcmtlcnMucHVzaChuZXh0KTtcbn1cblxuZnVuY3Rpb24gb25NYXBMb25nQ2xpY2soZXZlbnQpIHtcbiAgICBjb25zdCBjb3VudCA9IG1hcC5fZ2V0TWFya2Vyc0NvdW50KCk7XG4gICAgY29uc3QgbmV4dCA9IGNvdW50ICsgMTtcblxuICAgIC8vIG1hcC5hZGRNYXJrZXJzKDxIZXJlTWFya2VyW10+W3tcbiAgICAvLyAgICAgaWQ6IG5leHQsXG4gICAgLy8gICAgIGxhdGl0dWRlOiBldmVudC5sYXRpdHVkZSxcbiAgICAvLyAgICAgbG9uZ2l0dWRlOiBldmVudC5sb25naXR1ZGUsXG4gICAgLy8gICAgIHRpdGxlOiBgTG9uZyBDbGljayAke25leHR9YCxcbiAgICAvLyAgICAgb25UYXA6IChtYXJrZXIpID0+IHtcbiAgICAvLyAgICAgICAgIGNvbnN0IHVwZGF0ZWRNYXJrZXIgPSBPYmplY3QuYXNzaWduKHt9LCBtYXJrZXIsIHtcbiAgICAvLyAgICAgICAgICAgICBzZWxlY3RlZDogIW1hcmtlci5zZWxlY3RlZFxuICAgIC8vICAgICAgICAgfSk7XG4gICAgLy8gICAgICAgICBtYXAudXBkYXRlTWFya2VyKHVwZGF0ZWRNYXJrZXIpO1xuICAgIC8vICAgICB9XG4gICAgLy8gfV0pO1xuXG4gICAgLy8gbWFya2Vycy5wdXNoKG5leHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTWFya2VyKGV2ZW50KSB7XG4gICAgcGFnZS5nZXRWaWV3QnlJZCgnbWFwJykudXBkYXRlTWFya2VyKHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGxhdGl0dWRlOiAxMC42Njg5MjQzLFxuICAgICAgICBsb25naXR1ZGU6IC02MS41MzE1NDg2LFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbk1hcFJlYWR5KGV2ZW50KSB7XG4gICBcbn0iXX0=