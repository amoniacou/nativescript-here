"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var page;
var markers;
var tilt;
var map = null;
var points = [
    {
        latitude: 59.435803,
        longitude: 24.757259,
        activationRadius: 10
    }, {
        latitude: 59.433808,
        longitude: 24.766438,
        activationRadius: 15
    }, {
        latitude: 59.438599,
        longitude: 24.791812,
        activationRadius: 25
    }
];
function pageLoaded(args) {
    page = args.object;
    markers = [1];
    tilt = 45;
    page.bindingContext = new main_view_model_1.HelloWorldModel();
    page.getViewById('map').on('mapReady', onMapReady.bind(this));
    page.getViewById('map').on('mapClick', onMapClick.bind(this));
    page.getViewById('map').on('mapLongClick', onMapLongClick.bind(this));
}
exports.pageLoaded = pageLoaded;
function onLoaded(args) {
    args.object.on('mapReady', function (args) {
        console.dir('mapReady');
        onMapReady(args);
        map = args.object;
        map
            .calculateRoute(points)
            .then(function () {
            showMakers(points);
        });
    });
}
exports.onLoaded = onLoaded;
function removeMarkers() {
    map.removeMarkers(markers);
}
exports.removeMarkers = removeMarkers;
function navigation() {
    map.calculateRoute(points).then(function () {
        showMakers(points);
        map.startNavigation();
    });
}
exports.navigation = navigation;
function calculate() {
    map.calculateRoute(points).then(function () {
        showMakers(points);
    });
}
exports.calculate = calculate;
function simulation() {
    map.startSimulation();
}
exports.simulation = simulation;
function stop() {
    map.stopNavigation();
}
exports.stop = stop;
function showWay() {
    map.showWay();
}
exports.showWay = showWay;
function showMakers(points) {
    map
        .addMarkers(points.map(function (point, index) { return ({
        id: index,
        latitude: point.latitude,
        longitude: point.longitude,
        title: "Point " + index,
        draggable: false
    }); }))
        .then(function () {
        console.log('Markers added!');
    });
}
function onMapClick(event) {
    var count = map._getMarkersCount();
    var next = count + 1;
}
function onMapLongClick(event) {
    var count = map._getMarkersCount();
    var next = count + 1;
}
function updateMarker(event) {
    page.getViewById('map').updateMarker({
        id: 1,
        latitude: 10.6689243,
        longitude: -61.5315486,
    });
}
exports.updateMarker = updateMarker;
function onMapReady(event) {
}
//# sourceMappingURL=data:application/json;base64,