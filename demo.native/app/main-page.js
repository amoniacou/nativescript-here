"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var page;
var markers;
var tilt;
var map = null;
var points = [
    {
        latitude: 59.435803,
        longitude: 24.757259,
        activationRadius: 10
    }, {
        latitude: 59.433808,
        longitude: 24.766438,
        activationRadius: 15
    }, {
        latitude: 59.438599,
        longitude: 24.791812,
        activationRadius: 25
    }
];
function pageLoaded(args) {
    page = args.object;
    markers = [1];
    tilt = 45;
    page.bindingContext = new main_view_model_1.HelloWorldModel();
    page.getViewById('map').on('mapReady', onMapReady.bind(this));
    page.getViewById('map').on('mapClick', onMapClick.bind(this));
    page.getViewById('map').on('mapLongClick', onMapLongClick.bind(this));
}
exports.pageLoaded = pageLoaded;
function onLoaded(args) {
    args.object.on('mapReady', function (args) {
        console.dir('mapReady');
        onMapReady(args);
        map = args.object;
        map
            .calculateRoute(points)
            .then(function () {
            showMakers(points);
        });
        map.addCircles(points.map(function (point, index) { return ({
            id: index + '_circle',
            latitude: point.latitude,
            longitude: point.longitude,
            radius: point.activationRadius
        }); }));
    });
}
exports.onLoaded = onLoaded;
function removeMarkers() {
    map.removeMarkers(markers);
}
exports.removeMarkers = removeMarkers;
function navigation() {
    map.calculateRoute(points).then(function () {
        showMakers(points);
        map.startNavigation();
    });
}
exports.navigation = navigation;
function calculate() {
    map.calculateRoute(points).then(function () {
        showMakers(points);
    });
}
exports.calculate = calculate;
function simulation() {
    map.startSimulation();
}
exports.simulation = simulation;
function stop() {
    map.stopNavigation();
}
exports.stop = stop;
function showWay() {
    map.showWay();
}
exports.showWay = showWay;
function showMakers(points) {
    map
        .addMarkers(points.map(function (point, index) { return ({
        id: index,
        latitude: point.latitude,
        longitude: point.longitude,
        title: "Point " + index,
        draggable: false
    }); }))
        .then(function () {
        console.log('Markers added!');
    });
}
function onMapClick(event) {
    var count = map._getMarkersCount();
    var next = count + 1;
}
function onMapLongClick(event) {
    var count = map._getMarkersCount();
    var next = count + 1;
}
function updateMarker(event) {
    page.getViewById('map').updateMarker({
        id: 1,
        latitude: 10.6689243,
        longitude: -61.5315486,
    });
}
exports.updateMarker = updateMarker;
function onMapReady(event) {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEscURBQW9EO0FBR3BELElBQUksSUFBSSxDQUFDO0FBQ1QsSUFBSSxPQUFPLENBQUM7QUFDWixJQUFJLElBQUksQ0FBQztBQUNULElBQUksR0FBRyxHQUFHLElBQUksQ0FBQztBQUNmLElBQUksTUFBTSxHQUFHO0lBQ1Q7UUFDSSxRQUFRLEVBQUUsU0FBUztRQUNuQixTQUFTLEVBQUUsU0FBUztRQUNwQixnQkFBZ0IsRUFBRSxFQUFFO0tBQ3ZCLEVBQUU7UUFDQyxRQUFRLEVBQUUsU0FBUztRQUNuQixTQUFTLEVBQUUsU0FBUztRQUNwQixnQkFBZ0IsRUFBRSxFQUFFO0tBQ3ZCLEVBQUU7UUFDQyxRQUFRLEVBQUUsU0FBUztRQUNuQixTQUFTLEVBQUUsU0FBUztRQUNwQixnQkFBZ0IsRUFBRSxFQUFFO0tBQ3ZCO0NBQ0osQ0FBQTtBQUdELG9CQUEyQixJQUEwQjtJQUVqRCxJQUFJLEdBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNkLElBQUksR0FBRyxFQUFFLENBQUM7SUFDVixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksaUNBQWUsRUFBRSxDQUFDO0lBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM5RCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLElBQUks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RUFBRSxFQUFFLENBQUM7UUFDTCxRQUFRLEVBQUUsVUFBVTtRQUNwQixTQUFTLEVBQUUsQ0FBQyxVQUFVO0tBQ3pCLENBQUMsQ0FBQztBQUNQLENBQUM7QUFORCxvQ0FNQztBQUVELG9CQUFvQixLQUFLO0FBRXpCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvYnNlcnZhYmxlIGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCAqIGFzIHBhZ2VzIGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGFnZSc7XG5pbXBvcnQgeyBIZWxsb1dvcmxkTW9kZWwgfSBmcm9tICcuL21haW4tdmlldy1tb2RlbCc7XG5pbXBvcnQgeyBIZXJlLCBIZXJlTWFya2VyIH0gZnJvbSAnbmF0aXZlc2NyaXB0LWhlcmUnO1xuXG5sZXQgcGFnZTtcbmxldCBtYXJrZXJzO1xubGV0IHRpbHQ7XG5sZXQgbWFwID0gbnVsbDtcbmxldCBwb2ludHMgPSBbXG4gICAge1xuICAgICAgICBsYXRpdHVkZTogNTkuNDM1ODAzLFxuICAgICAgICBsb25naXR1ZGU6IDI0Ljc1NzI1OSxcbiAgICAgICAgYWN0aXZhdGlvblJhZGl1czogMTBcbiAgICB9LCB7XG4gICAgICAgIGxhdGl0dWRlOiA1OS40MzM4MDgsXG4gICAgICAgIGxvbmdpdHVkZTogMjQuNzY2NDM4LFxuICAgICAgICBhY3RpdmF0aW9uUmFkaXVzOiAxNVxuICAgIH0sIHtcbiAgICAgICAgbGF0aXR1ZGU6IDU5LjQzODU5OSxcbiAgICAgICAgbG9uZ2l0dWRlOiAyNC43OTE4MTIsXG4gICAgICAgIGFjdGl2YXRpb25SYWRpdXM6IDI1XG4gICAgfVxuXVxuXG4vLyBFdmVudCBoYW5kbGVyIGZvciBQYWdlICdsb2FkZWQnIGV2ZW50IGF0dGFjaGVkIGluIG1haW4tcGFnZS54bWxcbmV4cG9ydCBmdW5jdGlvbiBwYWdlTG9hZGVkKGFyZ3M6IG9ic2VydmFibGUuRXZlbnREYXRhKSB7XG4gICAgLy8gR2V0IHRoZSBldmVudCBzZW5kZXJcbiAgICBwYWdlID0gPHBhZ2VzLlBhZ2U+YXJncy5vYmplY3Q7XG4gICAgbWFya2VycyA9IFsxXTtcbiAgICB0aWx0ID0gNDU7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBIZWxsb1dvcmxkTW9kZWwoKTtcbiAgICBwYWdlLmdldFZpZXdCeUlkKCdtYXAnKS5vbignbWFwUmVhZHknLCBvbk1hcFJlYWR5LmJpbmQodGhpcykpO1xuICAgIHBhZ2UuZ2V0Vmlld0J5SWQoJ21hcCcpLm9uKCdtYXBDbGljaycsIG9uTWFwQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgcGFnZS5nZXRWaWV3QnlJZCgnbWFwJykub24oJ21hcExvbmdDbGljaycsIG9uTWFwTG9uZ0NsaWNrLmJpbmQodGhpcykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25Mb2FkZWQoYXJncykge1xuICAgIGFyZ3Mub2JqZWN0Lm9uKCdtYXBSZWFkeScsIGFyZ3MgPT4ge1xuICAgICAgICBjb25zb2xlLmRpcignbWFwUmVhZHknKVxuICAgICAgICBvbk1hcFJlYWR5KGFyZ3MpO1xuXG4gICAgICAgIG1hcCA9IGFyZ3Mub2JqZWN0O1xuXG4gICAgICAgIC8vIG1hcC50b2dnbGVTY3JvbGwoZmFsc2UpXG4gICAgICAgIC8vIG1hcC50b2dnbGVab29tKGZhbHNlKVxuXG4gICAgICAgIG1hcFxuICAgICAgICAgICAgLmNhbGN1bGF0ZVJvdXRlKHBvaW50cylcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzaG93TWFrZXJzKHBvaW50cylcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgbWFwLmFkZENpcmNsZXMocG9pbnRzLm1hcCgocG9pbnQsIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAgaWQ6IGluZGV4ICsgJ19jaXJjbGUnLFxuICAgICAgICAgICAgbGF0aXR1ZGU6IHBvaW50LmxhdGl0dWRlLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiBwb2ludC5sb25naXR1ZGUsXG4gICAgICAgICAgICByYWRpdXM6IHBvaW50LmFjdGl2YXRpb25SYWRpdXNcbiAgICAgICAgfSkpKVxuXG4gICAgICAgIC8vIG1hcC5hZGRNYXJrZXJzKDxIZXJlTWFya2VyW10+cG9pbnRzLm1hcCgocG9pbnQsIGluZGV4KSA9PiAoe1xuICAgICAgICAvLyAgICAgaWQ6IGluZGV4LFxuICAgICAgICAvLyAgICAgbGF0aXR1ZGU6IHBvaW50LmxhdGl0dWRlLFxuICAgICAgICAvLyAgICAgbG9uZ2l0dWRlOiBwb2ludC5sb25naXR1ZGUsXG4gICAgICAgIC8vICAgICB0aXRsZTogYFBvaW50ICR7aW5kZXh9YCxcbiAgICAgICAgLy8gICAgIG9uVGFwOiAobWFya2VyKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgY29uc3QgdXBkYXRlZE1hcmtlciA9IE9iamVjdC5hc3NpZ24oe30sIG1hcmtlciwge1xuICAgICAgICAvLyAgICAgICAgICAgICBzZWxlY3RlZDogIW1hcmtlci5zZWxlY3RlZFxuICAgICAgICAvLyAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgICAgIG1hcC51cGRhdGVNYXJrZXIodXBkYXRlZE1hcmtlcik7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pKSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVNYXJrZXJzKCkge1xuICAgIG1hcC5yZW1vdmVNYXJrZXJzKG1hcmtlcnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGlvbigpIHtcbiAgICBtYXAuY2FsY3VsYXRlUm91dGUocG9pbnRzKS50aGVuKCgpID0+IHtcbiAgICAgICAgc2hvd01ha2Vycyhwb2ludHMpXG4gICAgICAgIG1hcC5zdGFydE5hdmlnYXRpb24oKVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGUoKSB7XG4gICAgbWFwLmNhbGN1bGF0ZVJvdXRlKHBvaW50cykudGhlbigoKSA9PiB7XG4gICAgICAgIHNob3dNYWtlcnMocG9pbnRzKVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW11bGF0aW9uKCkge1xuICAgIG1hcC5zdGFydFNpbXVsYXRpb24oKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBtYXAuc3RvcE5hdmlnYXRpb24oKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd1dheSgpIHtcbiAgICBtYXAuc2hvd1dheSgpXG59XG5cbmZ1bmN0aW9uIHNob3dNYWtlcnMocG9pbnRzKSB7XG4gICAgbWFwXG4gICAgICAgIC5hZGRNYXJrZXJzKDxIZXJlTWFya2VyW10+cG9pbnRzLm1hcCgocG9pbnQsIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAgaWQ6IGluZGV4LFxuICAgICAgICAgICAgbGF0aXR1ZGU6IHBvaW50LmxhdGl0dWRlLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiBwb2ludC5sb25naXR1ZGUsXG4gICAgICAgICAgICB0aXRsZTogYFBvaW50ICR7aW5kZXh9YCxcbiAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2VcbiAgICAgICAgfSkpKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTWFya2VycyBhZGRlZCEnKVxuICAgICAgICB9KVxufVxuXG5mdW5jdGlvbiBvbk1hcENsaWNrKGV2ZW50KSB7XG4gICAgY29uc3QgY291bnQgPSBtYXAuX2dldE1hcmtlcnNDb3VudCgpO1xuICAgIGNvbnN0IG5leHQgPSBjb3VudCArIDE7XG5cbiAgICAvLyBtYXAuYWRkTWFya2Vycyg8SGVyZU1hcmtlcltdPlt7XG4gICAgLy8gICAgIGlkOiBuZXh0LFxuICAgIC8vICAgICBsYXRpdHVkZTogZXZlbnQubGF0aXR1ZGUsXG4gICAgLy8gICAgIGxvbmdpdHVkZTogZXZlbnQubG9uZ2l0dWRlLFxuICAgIC8vICAgICB0aXRsZTogYENsaWNrICR7bmV4dH1gXG4gICAgLy8gfV0pO1xuICAgIC8vIG1hcmtlcnMucHVzaChuZXh0KTtcbn1cblxuZnVuY3Rpb24gb25NYXBMb25nQ2xpY2soZXZlbnQpIHtcbiAgICBjb25zdCBjb3VudCA9IG1hcC5fZ2V0TWFya2Vyc0NvdW50KCk7XG4gICAgY29uc3QgbmV4dCA9IGNvdW50ICsgMTtcblxuICAgIC8vIG1hcC5hZGRNYXJrZXJzKDxIZXJlTWFya2VyW10+W3tcbiAgICAvLyAgICAgaWQ6IG5leHQsXG4gICAgLy8gICAgIGxhdGl0dWRlOiBldmVudC5sYXRpdHVkZSxcbiAgICAvLyAgICAgbG9uZ2l0dWRlOiBldmVudC5sb25naXR1ZGUsXG4gICAgLy8gICAgIHRpdGxlOiBgTG9uZyBDbGljayAke25leHR9YCxcbiAgICAvLyAgICAgb25UYXA6IChtYXJrZXIpID0+IHtcbiAgICAvLyAgICAgICAgIGNvbnN0IHVwZGF0ZWRNYXJrZXIgPSBPYmplY3QuYXNzaWduKHt9LCBtYXJrZXIsIHtcbiAgICAvLyAgICAgICAgICAgICBzZWxlY3RlZDogIW1hcmtlci5zZWxlY3RlZFxuICAgIC8vICAgICAgICAgfSk7XG4gICAgLy8gICAgICAgICBtYXAudXBkYXRlTWFya2VyKHVwZGF0ZWRNYXJrZXIpO1xuICAgIC8vICAgICB9XG4gICAgLy8gfV0pO1xuXG4gICAgLy8gbWFya2Vycy5wdXNoKG5leHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTWFya2VyKGV2ZW50KSB7XG4gICAgcGFnZS5nZXRWaWV3QnlJZCgnbWFwJykudXBkYXRlTWFya2VyKHtcbiAgICAgICAgaWQ6IDEsXG4gICAgICAgIGxhdGl0dWRlOiAxMC42Njg5MjQzLFxuICAgICAgICBsb25naXR1ZGU6IC02MS41MzE1NDg2LFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBvbk1hcFJlYWR5KGV2ZW50KSB7XG5cbn0iXX0=